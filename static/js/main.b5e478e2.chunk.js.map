{"version":3,"sources":["components/Progress.js","components/Loading.js","components/Question.js","components/Start.js","components/End.js","App.js","index.js"],"names":["Progress","props","bgcolor","completed","fillerStyles","height","width","backgroundColor","borderRadius","textAlign","transition","style","marginTop","position","top","padding","color","fontWeight","Loading","className","Question","data","onAnswerUpdate","numberOfQuestion","activeQuestion","onSetActiveQuestion","onSetStep","useState","selected","setSelected","error","setError","setCompleted","radiosWrapper","useRef","loading","setLoading","changeHandler","e","target","value","useEffect","console","log","findCheckedInput","current","querySelector","checked","question","ref","choices","map","choice","i","type","name","onChange","onClick","setTimeout","prevState","q","a","Math","floor","Start","onQuizStart","End","results","onReset","correctAnswers","setCorrectAnswers","correct","forEach","result","index","answer","length","App","step","setStep","setActiveQuestion","answers","setAnswers","quizData","onAnswerCheck","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5e478e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Progress = (props) => {\r\n  const { bgcolor, completed } = props;\r\n  const containerStyles = {\r\n    height: 20,\r\n    width: '100%',\r\n    backgroundColor: \"#e0e0de\",\r\n    borderRadius: 50,\r\n    marginTop: 50,\r\n    position:\"absolute\",\r\n    top:0,\r\n  }\r\n\r\n  const fillerStyles = {\r\n    height: '100%',\r\n    width: `${completed}%`,\r\n    backgroundColor: bgcolor,\r\n    borderRadius: 'inherit',\r\n    textAlign: 'right',\r\n    transition: 'width .5s ease-in-out',\r\n  }\r\n\r\n  const labelStyles = {\r\n    padding: 5,\r\n    color: 'white',\r\n    fontWeight: 'bold'\r\n  }\r\n  \r\n  return (\r\n    <div style={containerStyles}>\r\n      <div style={fillerStyles}>\r\n        <span style={labelStyles}>{`${completed}%`}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Progress;","import React from 'react'\r\nimport \"./Loading.css\"\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div className=\"lds-roller\"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>\r\n    )\r\n}\r\n\r\nexport default Loading;\r\n","import React, { useRef, useState ,useEffect } from 'react'\r\nimport './Question.css'\r\nimport Progress from './Progress';\r\nimport Loading from './Loading'\r\n\r\nconst testData = [\r\n    { bgcolor: \"#6a1b9a\", completed: 60 },\r\n    { bgcolor: \"#00695c\", completed: 30 },\r\n    { bgcolor: \"#ef6c00\", completed: 53 },\r\n  ];\r\n  \r\nconst Question = ({ data, onAnswerUpdate, numberOfQuestion, activeQuestion, onSetActiveQuestion, onSetStep}) => {\r\n    const [selected,setSelected] = useState(\"\");\r\n    const [error,setError] = useState(\"\");\r\n    const [completed, setCompleted] = useState(0);\r\n    const radiosWrapper = useRef();\r\n    const [loading,setLoading] = useState(false);\r\n\r\n\r\n\r\n    const changeHandler = (e) => {\r\n        setSelected(e.target.value);\r\n        if(error){\r\n            setError(\"\");\r\n        }\r\n    }\r\n\r\n    const nextClickHandler = (e) => {\r\n        if(selected === \"\"){\r\n            return setError(\"Please select one option\");\r\n        }\r\n        //loading\r\n        if(!loading){\r\n                setLoading(true);\r\n                setTimeout(() => {\r\n                    setLoading(false)\r\n                },1000)\r\n        }\r\n\r\n        onAnswerUpdate(prevState => [...prevState,{q: data.question, a:selected}]);\r\n        // clearInterval();\r\n        setSelected(\"\");\r\n        if(activeQuestion < numberOfQuestion - 1){\r\n            onSetActiveQuestion(activeQuestion + 1);\r\n        }\r\n        else{\r\n            onSetStep(3)\r\n        }\r\n        setCompleted(Math.floor(completed + 20));\r\n    }\r\n\r\n            useEffect(() => {\r\n                if(loading === true){\r\n                    console.log(\"Loading\")\r\n                }\r\n                else{\r\n                    const findCheckedInput = radiosWrapper.current.querySelector('input:checked');\r\n                    if(findCheckedInput) {\r\n                    findCheckedInput.checked = false;\r\n                    }\r\n                }\r\n\r\n        }, [data]);\r\n\r\n    return (\r\n        <>\r\n        { loading ? <Loading/> : \r\n                    <div className=\"question\">\r\n                    <Progress bgcolor={\"#776DA2\"} completed={completed} />\r\n                <div className=\"question-container container\">\r\n                    <div className=\"question-title\">{data.question}</div>\r\n                    <div className=\"main\" ref={radiosWrapper}>\r\n                    {data.choices.map((choice,i) => (\r\n                        <div className=\"answer-container\" key={i}>\r\n                            <label className=\"radio has-background-light\" >\r\n                                <input type=\"radio\" name=\"answer\" value={choice} onChange={changeHandler} />\r\n                                <span>{choice}</span>\r\n                            </label>\r\n                        </div>\r\n                    ))}\r\n                    </div>\r\n                    {error && <div className=\"error-container\">{error}</div>}\r\n                    <button className=\"question-btn\" onClick={nextClickHandler}>Next</button>\r\n                </div>\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Question\r\n","import React, {useEffect,useState,useRef} from 'react'\r\nimport \"./Start.css\"\r\n\r\nconst Start = ({onQuizStart}) => {\r\n    return (\r\n        <div className=\"start\">\r\n            <div className=\"start-container container\">\r\n                <h1>React Quize</h1>\r\n                <p>let's start it !</p>\r\n                <button onClick={onQuizStart}>Start</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Start\r\n","import React, { useEffect, useState } from 'react'\r\nimport './End.css'\r\n\r\nconst End = ({results,data,onReset}) => {\r\n    const [correctAnswers,setCorrectAnswers] = useState(0);\r\n\r\n    useEffect(() => {\r\n        let correct = 0;\r\n        results.forEach((result, index) => {\r\n          if(result.a === data[index].answer) {\r\n            correct++;\r\n          }\r\n        });\r\n        setCorrectAnswers(correct);\r\n      }, []);\r\n\r\n    return (\r\n        <div className=\"end\">\r\n            <div className=\"end-container container\">\r\n                <h1>Your results</h1>\r\n                <p>{correctAnswers} of {data.length}</p>\r\n                <p><strong>{Math.floor((correctAnswers / data.length) * 100)}%</strong></p>\r\n                <button className=\"try-btn\" onClick={onReset}>Try Again</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default End\r\n","import React, {useState,useEffect} from \"react\";\nimport quizData from './data.json'\nimport Question from \"./components/Question\";\nimport Start from './components/Start'\nimport End from './components/End'\n\nconst App = () => {\n  const [step,setStep] = useState(1);\n  const [activeQuestion,setActiveQuestion] = useState(0);\n  const [answers,setAnswers] = useState([]);\n\n  const quizStartHandler = () => {\n    setStep(2);\n  }\n\n  const resetClickHandler = () => {\n    setActiveQuestion(0);\n    setAnswers([]);\n    setStep(2);\n  }\n\n\n\n  return (\n    <div className=\"App wrapper\">\n      {step === 1 && <Start onQuizStart={quizStartHandler}/>} \n      {step === 2 && <Question\n        data={quizData.data[activeQuestion]}\n        onAnswerUpdate = {setAnswers}\n        numberOfQuestion = {quizData.data.length}\n        activeQuestion = {activeQuestion}\n        onSetActiveQuestion = {setActiveQuestion}\n        onSetStep = {setStep}\n      /> } \n      {step === 3 && <End\n        results={answers}\n        data={quizData.data}\n        onReset={resetClickHandler}\n        onAnswerCheck={() => {}}\n      />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}